generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Member {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String       @unique
  householdSize Int
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  rationCards   RationCard[]
  sales         Sale[]
  purchases     Purchase[]
  credits       Credit[]
}

model RationCard {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  memberId    String?    @db.ObjectId
  year        Int
  allowance   Json
  consumed    Json
  renewalDate DateTime
  member      Member?    @relation(fields: [memberId], references: [id])
  @@unique([memberId, year])
}

model Item {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  type           ItemType
  wholesalePrice Float
  marketPrice    Float
  unit           String
  inventory      Int
  sales          Sale[]
  purchases      Purchase[]
}

enum ItemType {
  PRODUCE
  CONSUMABLE
}

model Branch {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  location   String
  sales      Sale[]
  purchases  Purchase[]
}

model Sale {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  memberId   String?  @db.ObjectId
  branchId   String?  @db.ObjectId
  itemId     String?  @db.ObjectId
  quantity   Float
  date       DateTime @default(now())
  member     Member?  @relation(fields: [memberId], references: [id])
  branch     Branch?  @relation(fields: [branchId], references: [id])
  item       Item?    @relation(fields: [itemId], references: [id])
}

model Purchase {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  memberId   String?  @db.ObjectId
  branchId   String?  @db.ObjectId
  itemId     String?  @db.ObjectId
  quantity   Float
  pricePaid  Float
  onCredit   Boolean  @default(false)
  date       DateTime @default(now())
  member     Member?  @relation(fields: [memberId], references: [id])
  branch     Branch?  @relation(fields: [branchId], references: [id])
  item       Item?    @relation(fields: [itemId], references: [id])
}

model Credit {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  memberId   String?  @db.ObjectId
  amount     Float
  remaining  Float
  dateIssued DateTime @default(now())
  member     Member?  @relation(fields: [memberId], references: [id])
}